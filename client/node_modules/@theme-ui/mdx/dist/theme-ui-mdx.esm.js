import { jsx } from '@theme-ui/core';
import { css, get } from '@theme-ui/css';
import { useMemo } from 'react';
import { useMDXComponents, MDXProvider as MDXProvider$1 } from '@mdx-js/react';

/** @jsx jsx */
// mdx components
const tags = ['p', 'b', 'i', 'a', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'img', 'pre', 'code', 'ol', 'ul', 'li', 'blockquote', 'hr', 'em', 'table', 'tr', 'th', 'td', 'em', 'strong', 'del', // mdx
'inlineCode', 'thematicBreak', // other
'div', // theme-ui
'root'];
const aliases = {
  inlineCode: 'code',
  thematicBreak: 'hr',
  root: 'div'
};

const isAlias = x => x in aliases;

const alias = n => isAlias(n) ? aliases[n] : n;

const themed = key => theme => css(get(theme, `styles.${key}`))(theme); // opt out of typechecking whenever `as` prop is used

const createThemedComponent = (name, variant) => {
  const variantStyles = themed(variant);

  const component = props => {
    const extraStyles = {};

    if (name === 'th' || name === 'td') {
      const {
        align
      } = props;
      if (align !== 'char') extraStyles.textAlign = align;
    }

    const css = props['css'];
    return jsx(name, { ...props,
      css: [props.css, variantStyles, extraStyles].filter(Boolean)
    });
  };

  component.displayName = `Themed(${name})`;
  return component;
};

const _Themed = createThemedComponent('div', 'div');

const components = {};
const Themed = _Themed;
tags.forEach(tag => {
  const component = createThemedComponent(alias(tag), tag);
  components[tag] = component;
  Themed[tag] = component;
});

const createComponents = comps => {
  const componentKeys = Object.keys(comps);
  const next = { ...components
  }; // We enrich user's components with the styles from theme.styles.
  // Example: `components.p` will get the styles from `theme.styles.p` as className.
  // todo: test this behaviour

  componentKeys.forEach(key => {
    const componentAtKey = comps[key];

    if (componentAtKey) {
      const component = props => {
        return jsx(componentAtKey, { ...props,
          css: themed(key)
        });
      };

      component.displayName = "MdxComponents('" + key + "')";
      next[key] = component;
    }
  });
  return next;
};

const MDXProvider = ({
  components,
  children
}) => {
  const outer = useMDXComponents();
  const themedComponents = useMemo(() => {
    return createComponents({ ...outer,
      ...components
    });
  }, [components, outer]);
  return jsx(MDXProvider$1, {
    components: themedComponents,
    children
  });
};

export { MDXProvider, Themed, components, themed };
