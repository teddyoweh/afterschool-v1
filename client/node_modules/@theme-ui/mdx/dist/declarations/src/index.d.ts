/** @jsx jsx */
import { IntrinsicSxElements } from '@theme-ui/core';
import { CSSObject, Theme } from '@theme-ui/css';
import { ComponentType, FC, ReactNode, DetailedHTMLProps, HTMLAttributes, ComponentProps } from 'react';
declare type MDXProviderComponentsKnownKeys = {
    [key in keyof IntrinsicSxElements]?: ComponentType<any> | string;
};
export interface MDXProviderComponents extends MDXProviderComponentsKnownKeys {
    [key: string]: ComponentType<any> | string | undefined;
}
export declare type MdxAliases = {
    [key in keyof IntrinsicSxElements]: keyof JSX.IntrinsicElements;
};
export declare type MdxAliasesKeys = 'inlineCode' | 'thematicBreak' | 'root';
export declare type ThemedProps = {
    theme: Theme;
};
export interface MdxProviderProps {
    components?: MDXProviderComponents;
    children: ReactNode;
}
declare const aliases: {
    readonly inlineCode: "code";
    readonly thematicBreak: "hr";
    readonly root: "div";
};
declare type Aliases = typeof aliases;
export declare type ThemedComponentName = keyof IntrinsicSxElements;
export declare const themed: (key: ThemedComponentName | (string & {})) => (theme: Theme) => CSSObject;
export interface ThemedComponent<Name extends string> {
    (props: (Name extends keyof JSX.IntrinsicElements ? ComponentProps<Name> : {}) & {
        css?: CSSObject;
    }): JSX.Element;
    displayName: string;
}
export declare type ThemedComponentsDict = {
    [K in keyof IntrinsicSxElements]: K extends keyof Aliases ? ThemedComponent<Aliases[K]> : K extends keyof JSX.IntrinsicElements ? ThemedComponent<K> : never;
};
interface ThemedDivProps extends DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement> {
}
interface ThemedDiv {
    (props: ThemedDivProps): JSX.Element;
}
export declare const components: ThemedComponentsDict;
export declare const Themed: ThemedDiv & ThemedComponentsDict;
export declare const MDXProvider: FC<MdxProviderProps>;
export {};
